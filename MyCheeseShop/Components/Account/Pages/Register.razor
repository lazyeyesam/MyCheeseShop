@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using MyCheeseShop.Components.Account.Shared
@using MyCheeseShop.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<div class="card">
    <div class="card-body bg-light">
        <h4 class="card-title">Register</h4>

        <EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
            <DataAnnotationsValidator />
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">First Name</label>
                    <InputText class="form-control" placeholder="First Name" @bind-Value="Model.FirstName" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Last Name</label>
                    <InputText class="form-control" placeholder="Last Name" @bind-Value="Model.LastName" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Address</label>
                    <InputText class="form-control" placeholder="Address" @bind-Value="Model.Address" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">City</label>
                    <InputText class="form-control" placeholder="City" @bind-Value="Model.City" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Post Code</label>
                    <InputText class="form-control" placeholder="Post Code" @bind-Value="Model.PostCode" />
                </div>
                <div class="col-md-12">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" placeholder="Email" @bind-Value="Model.Email" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Password</label>
                    <InputText type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Confirm Password</label>
                    <InputText type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-outline-primary w-100">🌟 Register</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        // create the user
        var user = new User
        {
            UserName = Model.Email,
            Email = Model.Email,
            FirstName = Model.FirstName,
            LastName = Model.LastName,
            Address = Model.Address,
            City = Model.City,
            PostCode = Model.PostCode
        };

        // add to the database
        var result = await UserManager.CreateAsync(user, Model.Password);

        // report the errors
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        // assign the role
        await UserManager.AddToRoleAsync(user, "Customer");

        // log the user in
        var userId = await UserManager.GetUserIdAsync(user);
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
        
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        
        [Required]
        [DataType(DataType.Password)]
        [Compare("Password")]
        public string ConfirmPassword { get; set; } = "";
        
        [Required]
        public string FirstName { get; set; } = "";
        
        [Required]
        public string LastName { get; set; } = "";
        
        [Required]
        public string Address { get; set; } = "";     
        
        [Required]
        public string City { get; set; } = "";
        
        [Required]
        public string PostCode { get; set; } = "";
    }
}
