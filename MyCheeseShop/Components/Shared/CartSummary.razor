@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div>
    <table class="table" style="background-color: white; vertical-align:middle;">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                @if (IsEditable)
                {
                    <th scope="col">Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ShoppingCart.GetItems())
            {
                <tr>
                    <td scope="col">@item.Cheese.Name</td>
                    <td scope="col">@item.Cheese.Price.ToString("C")</td>
                    <td scope="col">@(item.Quantity * 100)g</td>
                    <td scope="col">@item.Total.ToString("C")</td>
                    @if (IsEditable)
                    {
                        <td scope="col">
                            <button class="btn btn-outline-success mt-1 mt-md-0" @onclick="() => IncreaseQuantity(item)">➕</button>
                            <button class="btn btn-outline-primary mt-1 mt-md-0" @onclick="() => DecreaseQuantity(item)">➖</button>
                            <button class="btn btn-outline-danger mt-1 mt-md-0" @onclick="() => RemoveItem(item)">🗑</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-flex justify-content-between">
    <div>
        <button @onclick="GoToStore" class="btn btn-outline-primary">🧀 Back to cheeses</button>
    </div>
    <div>
        <h4>Total: @(ShoppingCart.Total().ToString("C"))</h4>
    </div>
</div>

@code {
    [Parameter]
    public bool IsEditable { get; set; } = false;

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += async () => await CartUpdated();
    }

    private async Task CartUpdated()
    {
        StateHasChanged();
        await ProtectedSessionStore.SetAsync("cart", ShoppingCart.GetItems());
    }

    private void RemoveItem(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese);
    }

    private void IncreaseQuantity(CartItem item)
    {
        ShoppingCart.AddItem(item.Cheese, 1);
    }

    private void DecreaseQuantity(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese, 1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        StateHasChanged();
    }

    private void GoToStore()
    {
        NavigationManager.NavigateTo("/");
    }
}
